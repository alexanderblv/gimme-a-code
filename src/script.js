// Global game variables
let score = 0;
let startTime;
let gameEnd = true;
let gameInterval;
let activeMembers = [];
let memberArray = ['m1', 'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8'];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let bestScore = 0;
let clickTimes = [];
let successfulClicks = 0;
let missedClicks = 0;

window.addEventListener('DOMContentLoaded', initialisation);

function initialisation() {
    // Add click event listeners to all member images
    document.getElementById('game-field').addEventListener('click', function(data){
        if (memberArray.indexOf(data.target.id) !== -1) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π
            if (activeMembers.includes(data.target.id)) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
                const memberElement = document.getElementById(data.target.id);
                if (memberElement.dataset.appearTime) {
                    const appearTime = parseInt(memberElement.dataset.appearTime);
                    const clickTime = Date.now();
                    const reactionTime = (clickTime - appearTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    clickTimes.push(reactionTime);
                    successfulClicks++;
                    updateStatistics();
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
                score++;
                changeScore();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ —Ç–∞–π–º–µ—Ä—É (–±–æ–Ω—É—Å)
                if (!gameEnd) {
                    startTime += 1000; // –¥–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                    changeTimer();
                }
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∏ –∑–≤—É–∫ –∫–ª–∏–∫–∞
                triggerHitAnimation(data.target);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                hideMember(data.target);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
                showClickEffect(data.target);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(showRandomMember, 300);
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    document.getElementById('start-button').addEventListener('click', startGame);
    document.getElementById('restart-button').addEventListener('click', startGame);
    
    // Create the falling background elements
    createFallingElements();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    loadBestScore();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
function showClickEffect(member) {
    const effect = document.createElement('div');
    effect.textContent = '+1';
    effect.style.position = 'absolute';
    effect.style.color = '#00FFD1';
    effect.style.fontSize = '24px';
    effect.style.fontWeight = 'bold';
    effect.style.textShadow = '0 0 10px rgba(0, 255, 209, 0.8)';
    effect.style.zIndex = '100';
    
    // Get position
    const rect = member.getBoundingClientRect();
    effect.style.left = `${rect.left + rect.width / 2}px`;
    effect.style.top = `${rect.top + rect.height / 2}px`;
    
    // Add animation
    effect.style.transition = 'all 0.8s ease-out';
    effect.style.pointerEvents = 'none';
    
    document.body.appendChild(effect);
    
    // Animate and remove
    setTimeout(() => {
        effect.style.transform = 'translateY(-50px)';
        effect.style.opacity = '0';
    }, 50);
    
    setTimeout(() => {
        effect.remove();
    }, 800);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ localStorage
function saveBestScore() {
    if (score > bestScore) {
        bestScore = score;
        localStorage.setItem('crisisOfTrustBestScore', bestScore);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
function loadBestScore() {
    const savedBestScore = localStorage.getItem('crisisOfTrustBestScore');
    if (savedBestScore !== null) {
        bestScore = parseInt(savedBestScore);
    }
    updateStatistics();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏
function calculateAvgResponseTime() {
    if (clickTimes.length === 0) return 0;
    const sum = clickTimes.reduce((a, b) => a + b, 0);
    return (sum / clickTimes.length).toFixed(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–ª–∏–∫–æ–≤)
function calculateSuccessRate() {
    const totalAttempts = successfulClicks + missedClicks;
    if (totalAttempts === 0) return 0;
    return Math.round((successfulClicks / totalAttempts) * 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateStatistics() {
    // –û–±–Ω–æ–≤–ª—è–µ–º Best Score
    document.querySelector('.stats-item:nth-child(1) .stats-value').textContent = bestScore;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Avg. Response
    const avgResponse = calculateAvgResponseTime();
    document.querySelector('.stats-item:nth-child(2) .stats-value').textContent = avgResponse + 's';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Success Rate
    const successRate = calculateSuccessRate();
    document.querySelector('.stats-item:nth-child(3) .stats-value').textContent = successRate + '%';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –≤ –æ–≤–µ—Ä–ª–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    document.getElementById('final-score').textContent = score;
}

function createFallingElements() {
    const fallingContainer = document.querySelector('.falling-elements');
    const blinkingContainer = document.querySelector('.blinking-elements');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–¥–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for (let i = 0; i < 15; i++) {
        const element = document.createElement('div');
        element.classList.add('falling-item');
        element.style.left = `${Math.random() * 100}vw`;
        element.style.top = `${Math.random() * 100}vh`;
        element.style.opacity = Math.random() * 0.5 + 0.1;
        element.style.fontSize = `${Math.random() * 20 + 10}px`;
        element.innerHTML = ['‚ú®', 'üîí', 'üíª', '‚ö°', 'üîë'][Math.floor(Math.random() * 5)];
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏
        const animations = ['diagonal-drift', 'bounce', 'circular-path', 'zigzag'];
        const randomAnim = animations[Math.floor(Math.random() * animations.length)];
        element.style.animation = `${randomAnim} ${Math.random() * 15 + 10}s infinite alternate`;
        
        fallingContainer.appendChild(element);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–µ—Ä—Ü–∞—é—â–∏–µ –ø–∏–∫—Å–µ–ª–∏
    for (let i = 0; i < 30; i++) {
        const pixel = document.createElement('div');
        pixel.classList.add('succinct-pixel');
        pixel.style.left = `${Math.random() * 100}vw`;
        pixel.style.top = `${Math.random() * 100}vh`;
        pixel.style.width = `${Math.random() * 4 + 2}px`;
        pixel.style.height = pixel.style.width;
        pixel.style.backgroundColor = `hsl(${Math.random() * 60 + 270}, 100%, 70%)`;
        pixel.style.animation = `blink ${Math.random() * 3 + 2}s infinite`;
        
        blinkingContainer.appendChild(pixel);
    }
}

function triggerHitAnimation(target) {
    target.style.transform = 'scale(1.2) rotate(10deg)';
    setTimeout(() => {
        target.style.transform = 'scale(1) rotate(0deg)';
    }, 200);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
function showRandomMember() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const availableMembers = memberArray.filter(id => !activeMembers.includes(id));
    
    if (availableMembers.length > 0 && !gameEnd) {
        const randomIndex = Math.floor(Math.random() * availableMembers.length);
        const memberId = availableMembers[randomIndex];
        const member = document.getElementById(memberId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        activeMembers.push(memberId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        member.style.display = 'block';
        member.style.animation = 'pulse 1.5s infinite';
        member.style.filter = 'hue-rotate(0deg) brightness(1.2)';
        member.style.opacity = '1';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        member.dataset.appearTime = Date.now();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∫–ª–∏–∫–Ω—É—Ç
        setTimeout(() => {
            if (activeMembers.includes(memberId) && !gameEnd) {
                hideMember(member);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                missedClicks++;
                updateStatistics();
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                setTimeout(showRandomMember, Math.random() * 200 + 100);
            }
        }, Math.random() * 2000 + 1000);
    }
}

// –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç
function hideMember(member) {
    member.style.animation = '';
    member.style.filter = 'hue-rotate(-40deg) brightness(0.9)';
    member.style.opacity = '0.7';
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const index = activeMembers.indexOf(member.id);
    if (index > -1) {
        activeMembers.splice(index, 1);
    }
}

function changeScore() {
    const scoreElement = document.getElementById('score').getElementsByTagName('span')[0];
    scoreElement.innerHTML = 'Codes: ' + score;
    scoreElement.style.transform = 'scale(1.1) rotateX(20deg)';
    setTimeout(() => {
        scoreElement.style.transform = 'scale(1) rotateX(0deg)';
    }, 200);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (score > bestScore) {
        bestScore = score;
        localStorage.setItem('crisisOfTrustBestScore', bestScore);
        updateStatistics();
    }
}

function startTimer() {
    startTime = Date.now();
    changeTimer();
}

function changeTimer() {
    if ((Date.now() - startTime) >= 20000) {
        endGame();
    } else {
        setTimeout(changeTimer, 50);
        const remainingTime = Math.round(20 - (Date.now() - startTime) / 1000);
        const progressPercentage = 100 - (Date.now() - startTime) * 0.005;
        
        document.getElementById('progress').style.width = progressPercentage + '%';
        document.getElementById('timer').getElementsByTagName('span')[0].innerHTML = 'Time left: ' + remainingTime + ' seconds';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ
        if (remainingTime <= 5) {
            document.getElementById('timer').style.animation = 'shake 0.5s infinite';
        } else {
            document.getElementById('timer').style.animation = '';
        }
    }
}

function clearField() {
    let members = document.getElementsByClassName('member-img');
    for (let i = 0; i < members.length; i++) {
        members[i].style.display = 'none';
    }
    activeMembers = [];
}

function startGame() {
    console.log("startGame function called");
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–∏
    document.getElementById('start-overlay').classList.add('hidden');
    document.getElementById('game-over-overlay').classList.add('hidden');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    score = 0;
    changeScore();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    clickTimes = [];
    successfulClicks = 0;
    missedClicks = 0;
    updateStatistics();
    
    clearField();
    gameEnd = false;
    startTimer();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    setTimeout(showRandomMember, 300);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    gameInterval = setInterval(() => {
        if (Math.random() > 0.5 && !gameEnd) {
            showRandomMember();
        }
    }, 1000);
}

function endGame() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
    gameEnd = true;
    clearInterval(gameInterval);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    activeMembers.forEach(id => {
        const member = document.getElementById(id);
        hideMember(member);
    });
    activeMembers = [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    saveBestScore();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
    updateStatistics();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    document.getElementById('game-over-overlay').classList.remove('hidden');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultText, resultClass;
    if (score >= 20) {
        resultText = 'IMPRESSIVE SPEED!';
        resultClass = 'high-score';
    } else if (score < 20 && score > 8) {
        resultText = 'GOOD EFFORT!';
        resultClass = 'medium-score';
    } else {
        resultText = 'TRY AGAIN...';
        resultClass = 'low-score';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const gameOverTitle = document.querySelector('#game-over-overlay h1');
    gameOverTitle.textContent = resultText;
    gameOverTitle.className = resultClass;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –Ω–∞–∂–∞—Ç–∏—è
document.head.insertAdjacentHTML('beforeend', `
<style>
@keyframes clickEffect {
    0% { transform: translate(-50%, -50%) scale(0); opacity: 1; }
    100% { transform: translate(-50%, -50%) scale(2); opacity: 0; }
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

@keyframes shake {
    0% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    50% { transform: translateX(0); }
    75% { transform: translateX(5px); }
    100% { transform: translateX(0); }
}

@keyframes blink {
    0% { opacity: 0.2; }
    50% { opacity: 1; }
    100% { opacity: 0.2; }
}

@keyframes diagonal-drift {
    0% { transform: translate(0, 0); }
    50% { transform: translate(20px, 20px); }
    100% { transform: translate(0, 0); }
}

@keyframes bounce {
    0% { transform: translateY(0); }
    50% { transform: translateY(20px); }
    100% { transform: translateY(0); }
}

@keyframes circular-path {
    0% { transform: translate(0, 0); }
    25% { transform: translate(20px, 0); }
    50% { transform: translate(20px, 20px); }
    75% { transform: translate(0, 20px); }
    100% { transform: translate(0, 0); }
}

@keyframes zigzag {
    0% { transform: translate(0, 0); }
    25% { transform: translate(20px, 20px); }
    50% { transform: translate(0, 40px); }
    75% { transform: translate(-20px, 20px); }
    100% { transform: translate(0, 0); }
}
</style>
`);
